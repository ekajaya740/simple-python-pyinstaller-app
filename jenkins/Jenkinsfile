node {
    // Define environment variables
    def PYTHON_IMAGE = 'python:2-alpine'
    def PYTEST_IMAGE = 'qnib/pytest'
    def PYINSTALLER_IMAGE = 'cdrx/pyinstaller-linux:python2'
    def SOURCES_DIR = 'sources'
    def DIST_DIR = 'dist'

    stage('Build') {
        docker.image(PYTHON_IMAGE).inside {
            sh "python -m py_compile ${SOURCES_DIR}/add2vals.py ${SOURCES_DIR}/calc.py"
        }
    }

    stage('Test') {
        docker.image(PYTEST_IMAGE).inside {
            sh "py.test --verbose --junit-xml test-reports/results.xml ${SOURCES_DIR}/test_calc.py"
        }
        junit 'test-reports/results.xml' // Process test results after the container exits
    }

    stage('Deliver') {
        docker.image(PYINSTALLER_IMAGE).inside {
            sh "pyinstaller --onefile ${SOURCES_DIR}/add2vals.py"
        }
        archiveArtifacts "${DIST_DIR}/add2vals" // Archive artifacts after the container exits
    }

    // Clean up Docker containers and images
    stage('Cleanup') {
        sh 'docker system prune -f'
    }
}
